app:
  user:
    default_password=mypassword

server.port: 7070
spring.profiles.active: prod
---

spring.profiles: dev
server.port: 8081
#server.error.whitelabel.enabled: false
#spring.h2.console.enabled: true

spring.datasource.url: jdbc:mysql://localhost:3306/confocaradb
spring.datasource.username: root
spring.datasource.password:

spring.jpa.hibernate.ddl-auto: validate
spring.jpa.properties.hibernate.cache.use_second_level_cache: true

spring:
  http:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  jpa:
    show-sql: false
---

spring.profiles: prod
server.port: 8080

# MySQL config described here:
# https://springframework.guru/configuring-spring-boot-for-mysql
#spring.h2.console.enabled: true

spring.datasource.url: jdbc:mysql://mysql:3306/confocaraDB
spring.datasource.username: confocara
spring.datasource.password: confocara


# NOTE: If this was actually a production database, you not tell Hibernate
# to use the create-drop option. This tells Hibernate to recreate the database on startup.
# Definitely not the behavior we want.
# You can set this property to the following values:
# none, validate, update, create-drop.
# If this was actually a production database, you probably would want to use validate.
spring.jpa.hibernate.ddl-auto: validate
spring.jpa.properties.hibernate.cache.use_second_level_cache: true

spring:
  http:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  jpa:
    show-sql: false

#spring.thymeleaf.cache: false

---
# profil for Jenkins build and TU
spring.profiles: test
server.port: 8080
spring.h2.console.enabled: true
spring:
  jpa:
    show-sql: false