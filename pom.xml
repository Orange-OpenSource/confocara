<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Software Name: ConfOCARA
  ~
  ~ SPDX-FileCopyrightText: Copyright (c) 2016-2020 Orange
  ~ SPDX-License-Identifier: MPL-2.0
  ~
  ~ This software is distributed under the Mozilla Public License v. 2.0,
  ~ the text of which is available at http://mozilla.org/MPL/2.0/ or
  ~ see the "license.txt" file for more details.
  ~
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.orange.accessibility</groupId>
  <artifactId>ConfOCARA</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>

  <name>ConfOCARA</name>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.5.11.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>1.8</java.version>
    <bootstrap.version>4.0.0-2</bootstrap.version>
    <jquery.version>2.2.2</jquery.version>
    <pbkdf2.version>1.1.1</pbkdf2.version>
    <jcloverslf4j.version>1.7.21</jcloverslf4j.version>
    <logback.version>1.2.0</logback.version>
    <lombok.version>1.18.4</lombok.version>
    <junit.version>4.12</junit.version>
    <jacoco.version>0.8.1</jacoco.version>
    <sonar-jacoco-listeners.version>5.2.0.13398</sonar-jacoco-listeners.version>

    <org.immutables.value.version>2.7.4</org.immutables.value.version>

    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <!--configuration de Jacoco pour être conforme aux requis de Sonar-->
    <jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
    <jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
    <sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>
    <jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
    <sonar.jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.itReportPath>
    <!--exclusion des bouchons de toute analyse Sonar-->
    <sonar.exclusions>**/connector/**/mock/*.*, **/*Mock*.*</sonar.exclusions>
    <!--exclusion des fichiers de conf Spring de l’analyse Sonar pour la couverture des tests-->
    <sonar.coverage.exclusions>**/*Config.*, **/*Config$*.*, **/*Test.*, **/*IT.*
    </sonar.coverage.exclusions>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- live reload, etc -->
    <!-- in IntelliJ IDEA, use Shift + Ctrl + F9 (Build > Recompile...) on a template in order to reload it, w/o restarting the app -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- to get production ready metrics, etc -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.thymeleaf.extras</groupId>
      <artifactId>thymeleaf-extras-springsecurity4</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-test</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-autoconfigure</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>21.0</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.5</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>${jcloverslf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.webjars</groupId>
      <artifactId>bootstrap</artifactId>
      <version>${bootstrap.version}</version>
    </dependency>
    <dependency>
      <groupId>org.webjars</groupId>
      <artifactId>jquery</artifactId>
      <version>${jquery.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-jaxb-annotations</artifactId>
      <version>2.7.4</version>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-envers</artifactId>
      <version>5.1.0.Final</version>
      <scope>compile</scope>
    </dependency>

    <!-- SWAGGER -->
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>2.8.0</version>
    </dependency>

    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger-ui</artifactId>
      <version>2.8.0</version>
    </dependency>

    <!-- QUERYDSL -->
    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-core</artifactId>
      <version>4.2.1</version>
    </dependency>

    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-jpa</artifactId>
      <version>4.2.1</version>
    </dependency>

    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-apt</artifactId>
      <version>4.2.1</version>
    </dependency>

    <!-- Java annotation processors to generate simple, safe and consistent value objects. -->
    <!-- @see https://immutables.github.io/ -->
    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>value</artifactId>
      <version>${org.immutables.value.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- provided -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-hateoas</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <fork>true</fork>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.liquibase</groupId>
        <artifactId>liquibase-maven-plugin</artifactId>
        <version>3.4.1</version>
        <configuration>
          <propertyFile>src/main/resources/liquibase.properties</propertyFile>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.mysema.maven</groupId>
        <artifactId>apt-maven-plugin</artifactId>
        <version>1.1.3</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <outputDirectory>target/generated-sources/java</outputDirectory>
              <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- frontend -->
      <!-- see https://github.com/eirslett/frontend-maven-plugin -->
      <!-- Use the latest released version: https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/ -->
      <!-- https://stackoverflow.com/questions/51840110/exec-maven-plugin-with-npm-install -->
      <!--<plugin>-->
      <!--<groupId>com.github.eirslett</groupId>-->
      <!--<artifactId>frontend-maven-plugin</artifactId>-->
      <!--<version>1.6</version>-->
      <!--<configuration>-->
      <!--<workingDirectory>src/main/resources/public/js</workingDirectory>-->
      <!--&lt;!&ndash; where to install npm &ndash;&gt;-->
      <!--<installDirectory>${project.build.directory}/install</installDirectory>-->
      <!--</configuration>-->
      <!--<executions>-->

      <!--<execution>-->
      <!--<id>install node and npm</id>-->
      <!--<goals>-->
      <!--<goal>install-node-and-npm</goal>-->
      <!--</goals>-->
      <!--<configuration>-->
      <!--<nodeVersion>v8.11.3</nodeVersion>-->
      <!--<npmVersion>5.6.0</npmVersion>-->
      <!--</configuration>-->
      <!--</execution>-->

      <!--<execution>-->
      <!--<id>npm install</id>-->
      <!--<goals>-->
      <!--<goal>npm</goal>-->
      <!--</goals>-->
      <!--<configuration>-->
      <!--<arguments>install</arguments>-->
      <!--</configuration>-->
      <!--</execution>-->

      <!--<execution>-->
      <!--<id>npm run build</id>-->
      <!--<goals>-->
      <!--<goal>npm</goal>-->
      <!--</goals>-->
      <!--<configuration>-->
      <!--<arguments>run build:dev</arguments>-->
      <!--</configuration>-->
      <!--</execution>-->

      <!--</executions>-->
      <!--</plugin>-->

    </plugins>
  </build>

  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <name>Spring Snapshots</name>
      <url>https://repo.spring.io/snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>spring-milestones</id>
      <name>Spring Milestones</name>
      <url>https://repo.spring.io/milestone</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>spring-snapshots</id>
      <name>Spring Snapshots</name>
      <url>https://repo.spring.io/snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>spring-milestones</id>
      <name>Spring Milestones</name>
      <url>https://repo.spring.io/milestone</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <profiles>
    <profile>
      <id>IT</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <!--lancement des TI, dans la phase Maven des TI-->
                <id>integration-test</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <!--lancement des TI, dans la phase Maven verify-->
                <id>verify</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>coverage</id>
      <build>
        <plugins>
          <plugin> <!--configuration de surefire, pour les tests unitaires-->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <!--<argLine>${jacoco.agent.ut.arg}</argLine>-->
              <properties>
                <property>
                  <name>listener</name>
                  <value>org.sonar.java.jacoco.JUnitListener</value>
                </property>
              </properties>
              <!--on ignore les échecs des tests : le taux d’échec des tests est une métrique Sonar-->
              <testFailureIgnore>true</testFailureIgnore>
            </configuration>
          </plugin>
          <plugin> <!--configuration de failsafe, pour les tests d’intégration-->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <!--<argLine>${jacoco.agent.it.arg}</argLine>-->
              <properties>
                <property>
                  <name>listener</name>
                  <value>org.sonar.java.jacoco.JUnitListener</value>
                </property>
              </properties>
              <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
            </configuration>
          </plugin>
          <plugin> <!--configuration de jacoco, pour la couverture des tests-->
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco.version}</version>
            <executions>
              <execution> <!--couverture des tests unitaires-->
                <id>prepare-ut-agent</id>
                <phase>process-test-classes</phase>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <configuration>
                  <destFile>${sonar.jacoco.reportPath}</destFile>
                  <propertyName>jacoco.agent.ut.arg</propertyName>
                  <append>true</append>
                </configuration>
              </execution>
              <execution> <!--couverture des tests d’intégration-->
                <id>prepare-it-agent</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <configuration>
                  <destFile>${sonar.jacoco.itReportPath}</destFile>
                  <propertyName>jacoco.agent.it.arg</propertyName>
                  <append>true</append>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.sonarsource.java</groupId>
          <artifactId>sonar-jacoco-listeners</artifactId>
          <version>${sonar-jacoco-listeners.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
</project>
